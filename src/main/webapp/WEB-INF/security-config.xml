<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
        http://www.springframework.org/schema/security        
        http://www.springframework.org/schema/security/spring-security.xsd
        http://www.springframework.org/schema/security/oauth2 
	http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd">
    
    <!-- ==================================== OAuth provider configurations 
    ==================================== -->
    <oauth:authorization-server
        client-details-service-ref="clientDetails" token-services-ref="tokenServices"
        user-approval-handler-ref="userApprovalHandler">
        <oauth:authorization-code />
        <oauth:implicit />
        <oauth:refresh-token />
        <oauth:client-credentials />        
        <oauth:password authentication-manager-ref="authenticationManager"/>
    </oauth:authorization-server>

    <!-- clients service -->    
    <oauth:client-details-service id="clientDetails">
        <oauth:client client-id="app"
                      authorized-grant-types="password,refresh_token,implicit" secret="app"
                      authorities="ROLE_USER, ROLE_SHIPPER" scope="read,write,trust" />

        <oauth:client client-id="browser"
                      authorized-grant-types="password,refresh_token,implicit" secret="app"
                      authorities="ROLE_APPROVER,ROLE_CONTRIBUTER,ROLE_ADMINISTRATOR" scope="read,write,trust"/>
        
    </oauth:client-details-service>
    
    <oauth:expression-handler id="oauthExpressionHandler" />
    <oauth:web-expression-handler id="oauthWebExpressionHandler" />

    <!-- 
    Token configurations 
    <bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore" /> 
    -->
    <!--	
       <bean id="jdbcTokenStore"
             class="org.springframework.security.oauth2.provider.token.store.JdbcTokenStore">
           <constructor-arg ref="tokenDataSource" />
           <property name="authenticationKeyGenerator" ref="UniqueAuthenticationKey"> </property>
       </bean>
    -->   
    <bean id="jdbcTokenStore" class="com.hnc.eduonline.utils.NJdbcTokenStore">
        <constructor-arg ref="dataSource" />
        <property name="authenticationKeyGenerator" ref="UniqueAuthenticationKey"> </property>
    </bean>
    <bean id="UniqueAuthenticationKey" class="com.hnc.eduonline.utils.UniqueAuthenticationKeyGenerator">
    </bean>

    <bean id="tokenServices"
          class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <property name="tokenStore" ref="jdbcTokenStore" />
        <property name="supportRefreshToken" value="true" />
        <property name="accessTokenValiditySeconds" value="300"></property>
        <property name="clientDetailsService" ref="clientDetails" />
    </bean>
    
    <!-- token obtaining URL configurations -->
    <http pattern="/oauth/token/**" create-session="stateless"
          authentication-manager-ref="clientAuthenticationManager"
          xmlns="http://www.springframework.org/schema/security">

        <intercept-url pattern="/oauth/token/**" access="hasAnyRole('USER','VIEWER','INTRODUCTOR','CONTRIBUTOR','ADMINISTRATOR')" />        
        <anonymous enabled="false" />
        <http-basic entry-point-ref="clientAuthenticationEntryPoint" />
        <!-- include this only if you need to authenticate clients via request 
        parameters -->
        <custom-filter ref="clientCredentialsTokenEndpointFilter"
                       after="BASIC_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <csrf disabled="true"/>
    </http>

    <!-- OAuth 2 related beans -->
    <bean id="oauthAccessDeniedHandler"
          class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler">          
    </bean>

    <bean id="clientCredentialsTokenEndpointFilter"
          class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <property name="authenticationManager" ref="clientAuthenticationManager" />
    </bean>

    <bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased"
          xmlns="http://www.springframework.org/schema/beans">
        <constructor-arg>
            <list>
                <bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
                <bean class="org.springframework.security.access.vote.RoleVoter" />
                <!-- required to use ACL expressions like : hasRole('..') -->
                <bean
                    class="org.springframework.security.web.access.expression.WebExpressionVoter" />

                <bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
            </list>
        </constructor-arg>
    </bean>
    <!--
    <bean id="N2OAuth2ExceptionRenderer" class="com.ncb.nebauth.utils.N2OAuth2ExceptionRenderer">
    </bean>
    <bean id="nWebResponseExceptionTranslator" class="com.ncb.nebauth.utils.NWebResponseExceptionTranslator"></bean>
    -->
    <!-- Entry points -->
    <bean id="oauthAuthenticationEntryPoint"
          class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="custom" />                
    </bean>

    <bean id="clientAuthenticationEntryPoint"
          class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="custom_app/client" />
        <property name="typeName" value="Basic" />                
    </bean>

    <!-- User approval handler -->
    <bean id="userApprovalHandler"
          class="org.springframework.security.oauth2.provider.approval.TokenStoreUserApprovalHandler">        
        <property name="requestFactory" ref="oAuth2RequestFactory"/>
        <property name="tokenStore" ref="jdbcTokenStore"></property>
    </bean>
    
    <bean id="oAuth2RequestFactory"
          class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">
        <constructor-arg ref="clientDetails"/>
    </bean>

    <!--==================================== Authentication managers ==================================== -->

    <bean id="clientDetailsUserService"
          class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <constructor-arg ref="clientDetails" />
    </bean>

    <authentication-manager id="clientAuthenticationManager"
                            xmlns="http://www.springframework.org/schema/security">
        <authentication-provider user-service-ref="clientDetailsUserService" />
    </authentication-manager>

    <authentication-manager alias="authenticationManager"
                            xmlns="http://www.springframework.org/schema/security">
                
        <authentication-provider ref="ShippingAuthenticationProvider"></authentication-provider>        
        <!-- TODO: FOR TEST ONLY !! REMOVE IN PRODUCTION ENVIRONMENT -->
        <!--
        <authentication-provider>
            <user-service id="userDetailsService">
                <user name="vudailoi" password="vudailoi" authorities="ROLE_USER" />
                <user name="nhuongnm" password="nhuongnm" authorities="ROLE_USER" />
                <user name="tranmaitram" password="tranmaitram" authorities="ROLE_USER" />
                <user name="ncbadmin" password="ncbadmin" authorities="MOBILEAPP_ADMIN" />                
                <user name="giangdtt" password="giangdtt" authorities="ROLE_USER" />
                <user name="TRUCNHT" password="TRUCNHT" authorities="ROLE_USER" />
            </user-service>
        </authentication-provider>
        -->
    </authentication-manager>

    
    <bean id="ShippingAuthenticationProvider"
          class="com.hnc.eduonline.utils.AppAuthenticationProvider" >
        <property name="service" ref="UserService"></property>
            
    </bean>
    
    <!--==================================== Enable Standard Pre/Post annotations 
    ====================================== -->

    <security:global-method-security
        pre-post-annotations="enabled" proxy-target-class="true">
        <!--you could also wire in the expression handler up at the layer of the 
        http filters. See https://jira.springsource.org/browse/SEC-1452 -->
        <security:expression-handler ref="oauthExpressionHandler" />
    </security:global-method-security>    
        
    <oauth:resource-server id="resourceServerFilter"
                           resource-id="custom_app" token-services-ref="tokenServices" />  
    
    <!-- ========================= OAuth protected urls config ============================== -->


    <http pattern="/api/(.*)" request-matcher="regex"
          authentication-manager-ref="clientAuthenticationManager"
          create-session="never" use-expressions="true" entry-point-ref="oauthAuthenticationEntryPoint"
          access-decision-manager-ref="accessDecisionManager"
          xmlns="http://www.springframework.org/schema/security">

        <security:anonymous enabled="true" />
        <intercept-url pattern="/ws/(.*)\?(wsdl|xsd)(.*)"
                       access="permitAll" />
        <intercept-url pattern="/api/(.*)" access="hasAnyRole('ROLE_USER','ROLE_SHIPPER','ROLE_APPROVER','ROLE_CONTRIBUTER','ROLE_ADMINISTRATOR')" /> 
        <intercept-url pattern="/admin/(.*)" access="hasRole('ADMINISTRATOR')" />     
        <custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <csrf disabled="true"/>
    </http>    
</beans>        